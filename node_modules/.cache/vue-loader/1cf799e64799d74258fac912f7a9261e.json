{"remainingRequest":"/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/src/views/curso/Tema2.vue?vue&type=template&id=59bf2409&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/src/views/curso/Tema2.vue","mtime":1751826885113},{"path":"/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Estilos_y_Alteraciones_del_Aprendizaje/U3_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gTW9kZWxvIGRlIEtvbGInIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5vcmRlci0yCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWwgbW9kZWxvIGRlIGVzdGlsb3MgZGUgYXByZW5kaXphamUgZGUgS29sYiBmdWUgcHJvcHVlc3RvIHBvciBlbCBwc2ljw7Nsb2dvIGVzdGFkb3VuaWRlbnNlIERhdmlkIEtvbGIgZW4gMTk3NS4gU2Vnw7puIE1vc3F1ZXJhICgyMDEyKSwgZXN0YSB0ZW9yw61hIGVzIGFtcGxpYW1lbnRlIHJlY29ub2NpZGEgZW4gZWwgY2FtcG8gZGUgbGEgZWR1Y2FjacOzbiB5IGVsIGRlc2Fycm9sbG8gcGVyc29uYWwuIFNlIGJhc2EgZW4gbGEgdGVvcsOtYSBkZWwgYXByZW5kaXphamUgZXhwZXJpZW5jaWFsLCBxdWUgcGxhbnRlYSBxdWUgZWwgYXByZW5kaXphamUgc3VyZ2UgZGUgbGEgZXhwZXJpZW5jaWEgeSBsYSByZWZsZXhpw7NuIHNvYnJlIGVsbGEuIEVzIGRlY2lyLCBhcHJlbmRlciBubyBpbXBsaWNhIHNvbG8gcmVjaWJpciBpbmZvcm1hY2nDs24gZGUgbWFuZXJhIHBhc2l2YSwgc2lubyBwYXJ0aWNpcGFyIGFjdGl2YW1lbnRlIGVuIHNpdHVhY2lvbmVzIHByw6FjdGljYXMgeSBsdWVnbyBhbmFsaXphciBsbyBvY3VycmlkbyBwYXJhIGNvbnN0cnVpciBjb25vY2ltaWVudG8uCiAgICAKICAgICAgICAuYmctY29sb3ItNC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYSBleHBlcmllbmNpYSBlcyB1biBmYWN0b3IgY2xhdmUgZW4gbGEgaW50ZXJwcmV0YWNpw7NuIGRlbCBtdW5kbywgeWEgcXVlIGNhZGEgcGVyc29uYSBsYSBwZXJjaWJlIGRlIG1hbmVyYSBkaXN0aW50YS4gRXNwaW5hciB5IFZpZ3VlcmFzICgyMDIwKSBzb3N0aWVuZW4gcXVlLCBwYXJhIHF1ZSBsYSBleHBlcmllbmNpYSBzZWEgc2lnbmlmaWNhdGl2YSwgZGViZSBlc3RhciB2aW5jdWxhZGEgY29uIGVsIGNvbnRleHRvIGhpc3TDs3JpY28sIGxvcyBzaXN0ZW1hcyB5IHByb2Nlc29zIGZvcm1hdGl2b3MgZGVsIGFwcmVuZGl6LiBBdW5xdWUgbG9zIGluZGl2aWR1b3MgcHVlZGVuIGNvbXBhcnRpciBlbnRvcm5vcyBzaW1pbGFyZXMsIGNhZGEgdW5vIGRlc2Fycm9sbGEgdW4gZXN0aWxvIGRlIGFwcmVuZGl6YWplIHByb3BpbywgbG8gcXVlIHJlc2FsdGEgbGEgaW1wb3J0YW5jaWEgZGUgYXRlbmRlciBzdXMgY2FwYWNpZGFkZXMgZXBpc3TDqW1pY2FzLCBleHByZXNpdmFzIHkgc29tw6F0aWNhcyBwYXJhIHBvdGVuY2lhciBzdSBhcHJlbmRpemFqZS4KCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4xXSBGdW5kYW1lbnRvcyBkZWwgbW9kZWxvCiAgICAKICAgIHAgRGF2aWQgS29sYiBkZXNhcnJvbGzDsyBzdSBtb2RlbG8gY29uIGJhc2UgZW4gaW52ZXN0aWdhY2lvbmVzIHNvYnJlIGPDs21vIGxhcyBwZXJzb25hcyBhcHJlbmRlbiB5IHByb2Nlc2FuIGxhIGluZm9ybWFjacOzbiwgdG9tYW5kbyBjb21vIHJlZmVyZW5jaWEgdGVvcsOtYXMgZGUgYXV0b3JlcyBjb21vIEt1cnQgTGV3aW4geSBKZWFuIFBpYWdldC4gU3UgcHJvcHVlc3RhIGZ1ZSBwcmVzZW50YWRhIGVuIHN1IGxpYnJvIDxlbT5FeHBlcmllbnRpYWwgTGVhcm5pbmc6IEV4cGVyaWVuY2UgYXMgdGhlIFNvdXJjZSBvZiBMZWFybmluZyBhbmQgRGV2ZWxvcG1lbnQ8L2VtPiAoMTk4NCkuCiAgICBoNSBFc3RlIG1vZGVsbyBkZXNjcmliZSBlbCBhcHJlbmRpemFqZSBjb21vIHVuIGNpY2xvIGRlIGN1YXRybyBldGFwYXM6CgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMgogICAgICAucC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIEltYWdlbkluZm9ncmFmaWNhLmNvbG9yLXNlY3VuZGFyaW8KICAgICAgICAgICAgICB0ZW1wbGF0ZSh2LXNsb3Q6aW1hZ2VuKQogICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzMuc3ZnJywgYWx0PScnLCBzdHlsZT0ibWF4LXdpZHRoOiAxMTA2cHg7IikubXgtYXV0bwogICAgCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjMwJSIgeT0iMTIuNSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSBFeHBlcmllbmNpYSBjb25jcmV0YSAoRUMpCiAgICAgICAgICAgICAgICBwIEVsIGVzdHVkaWFudGUgaW50ZXJhY3TDumEgY29uIGVsIG9iamV0byBkZSBlc3R1ZGlvLCBwYXJ0aWNpcGFuZG8gZW4gdW5hIG51ZXZhIGV4cGVyaWVuY2lhLgogICAgCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjMwJSIgeT0iNjAlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgT2JzZXJ2YWNpw7NuIHJlZmxleGl2YSAoT1IpCiAgICAgICAgICAgICAgICBwIFNlIGFuYWxpemFuIGxhcyBleHBlcmllbmNpYXMgZGVzZGUgZGlzdGludGFzIHBlcnNwZWN0aXZhcyBwYXJhIGV4dHJhZXIgaWRlYXMgY2xhdmUuCiAgICAKICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iNjglIiB5PSIxMi41JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgIGg1IENvbmNlcHR1YWxpemFjacOzbiBhYnN0cmFjdGEgKENBKQogICAgICAgICAgICAgICAgcCBTZSBjb250cmFzdGFuIGxhcyBvYnNlcnZhY2lvbmVzIGNvbiBpbmZvcm1hY2nDs24gdGXDs3JpY2EsIHBlcm1pdGllbmRvIGdlbmVyYWxpemFyIGVsIGNvbm9jaW1pZW50by4KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI2OSUiIHk9IjYwJSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgIGg1IEV4cGVyaW1lbnRhY2nDs24gYWN0aXZhIChFQSkKICAgICAgICAgICAgICAgIHAgU2UgYXBsaWNhbiBsb3MgY29ub2NpbWllbnRvcyBhZHF1aXJpZG9zIGVuIG51ZXZvcyBjb250ZXh0b3MgcGFyYSBldmFsdWFyIHN1IHV0aWxpZGFkLgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci02Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi80LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCBFc3RlIGNpY2xvIGRlIGFwcmVuZGl6YWplIGVzIHVuYSBlc3BpcmFsIGNvbnRpbnVhIGVuIGxhIHF1ZSBjYWRhIGV0YXBhIHNlIGJhc2EgZW4gbGEgYW50ZXJpb3IsIHBlcm1pdGllbmRvIHVuYSBjb21wcmVuc2nDs24gbcOhcyBwcm9mdW5kYSB5IHNpZ25pZmljYXRpdmEgZGUgbG9zIGNvbnRlbmlkb3MuCiAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBEaW1lbnNpb25lcyBkZWwgbW9kZWxvCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5iZ19pbWctMy5tYi01CiAgICAgIC5jb2wtbGctMTIKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTgoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTMubWItbGctMAogICAgICAgICAgICBwIFNlZ8O6biBNb3NxdWVyYSAoMjAxMiksIGVsIG1vZGVsbyBkZSBLb2xiIHNlIGZ1bmRhbWVudGEgZW4gZG9zIGRpbWVuc2lvbmVzIHByaW5jaXBhbGVzOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+UGVyY2VwY2nDs246PC9iPiBkZXNjcmliZSBjw7NtbyBsYXMgcGVyc29uYXMgcGVyY2liZW4gbGEgaW5mb3JtYWNpw7NuLCB5YSBzZWEgYSB0cmF2w6lzIGRlIGxhIGV4cGVyaWVuY2lhIGNvbmNyZXRhIG8gZGUgbGEgY29uY2VwdHVhbGl6YWNpw7NuIGFic3RyYWN0YS4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+UHJvY2VzYW1pZW50bzo8L2I+IGluZGljYSBjw7NtbyBzZSBwcm9jZXNhIGxhIGluZm9ybWFjacOzbiwgeWEgc2VhIG1lZGlhbnRlIGxhIG9ic2VydmFjacOzbiByZWZsZXhpdmEgbyBsYSBleHBlcmltZW50YWNpw7NuIGFjdGl2YS4KICAgICAgICAgIC5jb2wtbGctNChkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgIGltZy5pbWctZmx1aWQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi81LnN2ZycsIHN0eWxlPSJtYXgtd2lkdGg6NDg2cHgiLCBhbHQ9IiIgKS5teC1hdXRvLm14LWxnLTAubXMtbGctYXV0by5tYi00Lm1iLWxnLTAKICAgIAogICAgcC5tYi01IEEgcGFydGlyIGRlIGxhIGNvbWJpbmFjacOzbiBkZSBlc3RhcyBkaW1lbnNpb25lcywgS29sYiBpZGVudGlmaWNhIGN1YXRybyBlc3RpbG9zIGRlIGFwcmVuZGl6YWplOgoKICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi82LnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IkNvbnZlcmdlbnRlIikKICAgICAgICAgICAgcCBQcmVmaWVyZSBsYSBjb25jZXB0dWFsaXphY2nDs24gYWJzdHJhY3RhIHkgbGEgZXhwZXJpbWVudGFjacOzbiBhY3RpdmEuIFNlIGVuZm9jYSBlbiBsYSBhcGxpY2FjacOzbiBwcsOhY3RpY2EgZGUgaWRlYXMgeSBsYSByZXNvbHVjacOzbiBkZSBwcm9ibGVtYXMuCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJEaXZlcmdlbnRlIikKICAgICAgICAgICAgcCBQcmVmaWVyZSBsYSBleHBlcmllbmNpYSBjb25jcmV0YSB5IGxhIG9ic2VydmFjacOzbiByZWZsZXhpdmEuIFNlIGNhcmFjdGVyaXphIHBvciBsYSBjcmVhdGl2aWRhZCwgbGEgaW1hZ2luYWNpw7NuIHkgbGEgZ2VuZXJhY2nDs24gZGUgaWRlYXMuCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJBc2ltaWxhZG9yICIpCiAgICAgICAgICAgIHAgUHJlZmllcmUgbGEgY29uY2VwdHVhbGl6YWNpw7NuIGFic3RyYWN0YSB5IGxhIG9ic2VydmFjacOzbiByZWZsZXhpdmEuIFNlIGRlc3RhY2EgZW4gbGEgb3JnYW5pemFjacOzbiB5IGVsIGFuw6FsaXNpcyBkZSBpbmZvcm1hY2nDs24uCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJBY29tb2RhZG9yIikKICAgICAgICAgICAgcCBQcmVmaWVyZSBsYSBleHBlcmllbmNpYSBjb25jcmV0YSB5IGxhIGV4cGVyaW1lbnRhY2nDs24gYWN0aXZhLiBFcyBhZGFwdGFibGUsIHByw6FjdGljbyB5IGRpc2ZydXRhIGRlbCB0cmFiYWpvIGVuIGVxdWlwby4KICAgIAogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVqZW1wbG9zIHByw6FjdGljb3MKICAgIHAubWItNSBQYXJhIGlsdXN0cmFyIGNhZGEgZXN0aWxvIGRlIGFwcmVuZGl6YWplLCBzZSBwcmVzZW50YW4gbG9zIHNpZ3VpZW50ZXMgZWplbXBsb3MgY29uIGVzdHVkaWFudGVzIGRlIHByaW1hcmlhOgoKICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wLm9yZGVyLTEub3JkZXItbGctMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTMucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04Lm9yZGVyLTIub3JkZXItbGctMQogICAgCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IkNvbnZlcmdlbnRlIikKICAgICAgICAgICAgcCBVbiBlc3R1ZGlhbnRlIGVuIGNsYXNlIGRlIGNpZW5jaWFzIHNlIGVuZm9jYSBlbiBjb21wcmVuZGVyIGPDs21vIGZ1bmNpb25hbiBsYXMgcGFydGVzIGRlIHVuYSBwbGFudGEuIERpc2ZydXRhIGhhY2VyIGV4cGVyaW1lbnRvcyBjb21vIHBsYW50YXIgc2VtaWxsYXMgeSBvYnNlcnZhciBzdSBjcmVjaW1pZW50by4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkRpdmVyZ2VudGUiKQogICAgICAgICAgICBwIFVuIGVzdHVkaWFudGUgZW4gY2xhc2UgZGUgbGl0ZXJhdHVyYSBjcmVhIHVuIGN1ZW50byBzb2JyZSBhbmltYWxlcywgdXRpbGl6YW5kbyBzdSBjcmVhdGl2aWRhZCBwYXJhIGltYWdpbmFyIHBlcnNvbmFqZXMgeSBzaXR1YWNpb25lcyBpbm5vdmFkb3Jhcy4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkFzaW1pbGFkb3IgIikKICAgICAgICAgICAgcCBVbiBlc3R1ZGlhbnRlIGVuIGNsYXNlIGRlIGhpc3RvcmlhIGFuYWxpemEgbGFzIGNhdXNhcyB5IGNvbnNlY3VlbmNpYXMgZGUgbGEgaW5kZXBlbmRlbmNpYSBkZSBzdSBwYcOtcywgb3JnYW5pemFuZG8gbG9zIGhlY2hvcyBlbiB1bmEgbMOtbmVhIGRlIHRpZW1wby4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkFjb21vZGFkb3IiKQogICAgICAgICAgICBwIFVuIGVzdHVkaWFudGUgZW4gdW4gcHJveWVjdG8gZ3J1cGFsIGNvbnN0cnV5ZSB1bmEgbWFxdWV0YSBkZSBsYSBjaXVkYWQsIHBhcnRpY2lwYW5kbyBhY3RpdmFtZW50ZSBlbiB0YXJlYXMgcHLDoWN0aWNhcyB5IGNvbGFib3JhbmRvIGNvbiBzdXMgY29tcGHDsWVyb3MuCiAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBBcGxpY2FjacOzbiBkZWwgY2ljbG8gZGUgYXByZW5kaXphamUKICAgIHAubWItNSBQYXJhIGNvbXByZW5kZXIgY8OzbW8gZnVuY2lvbmEgZWwgY2ljbG8gZGUgS29sYiBlbiBsYSBlbnNlw7FhbnphLCBzZSBwcmVzZW50YSBlbCBzaWd1aWVudGUgZWplbXBsbyBzb2JyZSBlbCBhcHJlbmRpemFqZSBkZSBsb3MgYW5pbWFsZXM6CgogICAgLmJnX2ltZy0yCiAgICAgIGRpdi5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNy5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBFeHBlcmllbmNpYSBjb25jcmV0YSAoRUMpCiAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBMb3MgZXN0dWRpYW50ZXMgdmlzaXRhbiB1biB6b29sw7NnaWNvIHkgb2JzZXJ2YW4gZGlzdGludG9zIGFuaW1hbGVzLgogICAgICAKICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBPYnNlcnZhY2nDs24gcmVmbGV4aXZhIChPUikKICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEVuIGNsYXNlLCBjb21lbnRhbiBsbyBxdWUgdmllcm9uLCBkZXN0YWNhbiBkZXRhbGxlcyBxdWUgbGVzIGxsYW1hcm9uIGxhIGF0ZW5jacOzbiB5IHJlZmxleGlvbmFuIHNvYnJlIHN1cyBow6FiaXRvcy4KICAgICAgCiAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzkuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgQ29uY2VwdHVhbGl6YWNpw7NuIGFic3RyYWN0YSAoQ0EpCiAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBFbCBkb2NlbnRlIGV4cGxpY2EgbGFzIGNhcmFjdGVyw61zdGljYXMgY29tdW5lcyBkZSBsb3MgYW5pbWFsZXMgeSBzdSBjbGFzaWZpY2FjacOzbi4KICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTAuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgRXhwZXJpbWVudGFjacOzbiBhY3RpdmEgKEVBKQogICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgTG9zIGVzdHVkaWFudGVzIGludmVzdGlnYW4gc29icmUgdW4gYW5pbWFsIGRlIHN1IGVsZWNjacOzbiB5IHByZXBhcmFuIHVuYSBwcmVzZW50YWNpw7NuLgogICAgICAKICAgICAgcC5tYi00IEVzIGltcG9ydGFudGUgcmVjb3JkYXIgcXVlIGxvcyBlc3R1ZGlhbnRlcyBwdWVkZW4gcHJlc2VudGFyIHVuYSBjb21iaW5hY2nDs24gZGUgZXN0aWxvcyBkZSBhcHJlbmRpemFqZSB5IHF1ZSBlc3RvcyBwdWVkZW4gZXZvbHVjaW9uYXIgY29uIGVsIHRpZW1wby4gT2JzZXJ2YXIgc3UgY29tcG9ydGFtaWVudG8gZW4gZGlzdGludG9zIGNvbnRleHRvcyBwZXJtaXRlIGEgbG9zIGRvY2VudGVzIGFkYXB0YXIgc3VzIGVzdHJhdGVnaWFzIHBlZGFnw7NnaWNhcyBwYXJhIG9wdGltaXphciBlbCBwcm9jZXNvIGRlIGVuc2XDsWFuemEuCgogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAgIC5jb2wtbGctOAogICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnNoYWRvdy1zb2Z0LnAtNC5tYi00CiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWFyb3VuZC5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLW1kLWF1dG8KICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2xpbmsuc3ZnIiwgc3R5bGU9IndpZHRoOiA4MHB4OyIpLm14LWF1dG8ubWItNC5tYi1sZy0wCiAgICAgICAgICAgICAgLmNvbAogICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtYmV0d2Vlbi5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAgICAgLmNvbC5tYi0zLm1iLXNtLTAKICAgICAgICAgICAgICAgICAgICBoNS5tYi0xIEVsIG1vZGVsbyBkZSBhcHJlbmRpemFqZSBLb2xiCiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIFBhcmEgYW1wbGlhciBpbmZvcm1hY2nDs24gc29icmUgZXN0ZSBtb2RlbG8sIHNlIHJlY29taWVuZGEgcmV2aXNhciBlbCBzaWd1aWVudGUgcG9ydGFsIHdlYjogCiAgICAgICAgICAgICAgICAgIC5jb2wtc20tYXV0bwogICAgICAgICAgICAgICAgICAgIGEuYm90b24uY29sb3ItcHJpbWFyaW8oaHJlZj0iaHR0cHM6Ly9taS1hcHJlbmRpemFqZS5jb20vYXByZW5kaXphamUta29sYi8iIHRhcmdldD0iX2JsYW5rIikKICAgICAgICAgICAgICAgICAgICAgIHNwYW4gSXIgYWwgc2l0aW8KICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LXJpZ2h0CiAgICAKICAgICN0XzJfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjJdIEZ1bmNpw7NuIGRlbCBkb2NlbnRlIGVuIGVzdGUgbW9kZWxvCgogICAgLmJnX2ltZy00Lm1iLTUKICAgICAgLnJvdy5tYi00CiAgICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFbCBhcHJlbmRpemFqZSBleHBlcmllbmNpYWwgc2UgY29uY2liZSBjb21vIHVuIHByb2Nlc28gcXVlIGNvbmVjdGEgbGFzIHZpdmVuY2lhcyBwZXJzb25hbGVzIGNvbiBudWV2b3MgY29ub2NpbWllbnRvcywgcHJvbW92aWVuZG8gYXPDrSB1biBhcHJlbmRpemFqZSBjb250aW51byB5IHNpZ25pZmljYXRpdm8uIFNlZ8O6biBHb256w6FsZXosIFBhdGFycm95byB5IENhcnJlw7FvICgyMDE3KSwgY2l0YWRvcyBwb3IgRXNwaW5hciB5IFZpZ3VlcmFzICgyMDIwKSwgZXN0ZSBlbmZvcXVlIHBlcm1pdGUgYSBsb3MgZG9jZW50ZXMgdG9tYXIgZGVjaXNpb25lcyBpbmZvcm1hZGFzIGFsIHNlbGVjY2lvbmFyIGUgaW50ZWdyYXIgcmVjdXJzb3MgZGlkw6FjdGljb3MgYWRhcHRhZG9zIGEgbG9zIGRpdmVyc29zIGVzdGlsb3MgZGUgYXByZW5kaXphamUgZGUgc3VzIGVzdHVkaWFudGVzLiBEZSBlc3RhIG1hbmVyYSwgc2Ugb3B0aW1pemEgZWwgZGVzYXJyb2xsbyBkZWwgYXByZW5kaXphamUgeSBzZSBmb21lbnRhIGxhIGVxdWlkYWQgZW4gZWwgYXVsYSwgdmFsb3JhbmRvIGxhIGRpdmVyc2lkYWQgeSByZWNvbm9jaWVuZG8gbGFzIHBhcnRpY3VsYXJpZGFkZXMgaW5kaXZpZHVhbGVzLgogICAgICAKICAgICAgICAgIC5iZy1jb2xvci02LnAtNC5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICAgIHAubWItMCBMb3MgbW9kZWxvcyBkZSBhcHJlbmRpemFqZSBleHBlcmllbmNpYWwgcmVzYWx0YW4gbGFzIGRpZmVyZW5jaWFzIGluZGl2aWR1YWxlcyBlbiBsb3MgcHJvY2Vzb3MgZGUgYXByZW5kaXphamUsIGxvIHF1ZSBleGlnZSBsYSBpbXBsZW1lbnRhY2nDs24gZGUgZXN0cmF0ZWdpYXMgcGVkYWfDs2dpY2FzIHZhcmlhZGFzIHF1ZSBhYmFycXVlbiBkaXN0aW50b3MgYW1iaWVudGVzIGRlbnRybyBkZWwgbWlzbW8gY29udGV4dG8gZWR1Y2F0aXZvLiBBc8OtLCBlbCBhcHJlbmRpemFqZSBzaWduaWZpY2F0aXZvIHNlIHBvdGVuY2lhIGEgdHJhdsOpcyBkZSBsYXMgY3VhdHJvIGZhc2VzIGRlbCBjaWNsbyBkZSBLb2xiOiBleHBlcmllbmNpYSwgcmVmbGV4acOzbiwgY29uY2VwdHVhbGl6YWNpw7NuIHkgZXhwZXJpbWVudGFjacOzbi4KICAgICAgCiAgICAgICAgICBwLm1iLTQgQSBjb250aW51YWNpw7NuLCBzZSBleHBsb3JhIGVsIHJvbCBkZWwgZG9jZW50ZSBlbiBjYWRhIGZhc2UgZGVsIGNpY2xvIGRlIGFwcmVuZGl6YWplIGV4cGVyaWVuY2lhbCBkZSBLb2xiLgoKICAgCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAuY29sLWxnLTYKICAgICAgICAgIFRhcmpldGFBdWRpby5jb2xvci1hY2VudG8tYm90b25lcy5iZy1jb2xvci13aGl0ZS5tYi0zKAogICAgICAgICAgICB0ZXh0bz0iUm9sIGRlbCBkb2NlbnRlIGVuIGNhZGEgZmFzZSBkZWwgY2ljbG8gZGUgS29sYiIKICAgICAgICAgICAgdGllbXBvCiAgICAgICAgICAgIDphdWRpbz0icmVxdWlyZSgnLi4vLi4vYXNzZXRzL2N1cnNvL3BvZGNhc3QvcG9kY2FzdDEubXAzJykiCiAgICAgICAgICApCgogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVzdHJhdGVnaWFzIHBhcmEgdW4gYXByZW5kaXphamUgZXhwZXJpZW5jaWFsIGVmZWN0aXZvCiAgICBwLm1iLTUgUGFyYSBxdWUgZWwgYXByZW5kaXphamUgZXhwZXJpZW5jaWFsIHNlYSBzaWduaWZpY2F0aXZvLCBlcyBlc2VuY2lhbCBxdWUgbG9zIGRvY2VudGVzIGVtcGxlZW4gZXN0cmF0ZWdpYXMgZGlkw6FjdGljYXMgcXVlIGFiYXJxdWVuIGxhcyBjdWF0cm8gZmFzZXMgZGVsIGNpY2xvIGRlIGFwcmVuZGl6YWplIHkgY29uc2lkZXJlbiBsb3MgZGlmZXJlbnRlcyBlc3RpbG9zIGRlIGFwcmVuZGl6YWplIGRlIHN1cyBlc3R1ZGlhbnRlcy4gRW50cmUgbGFzIGVzdHJhdGVnaWFzIG3DoXMgZWZlY3RpdmFzIHNlIGVuY3VlbnRyYW46CgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTQKICAgICAgLnAtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctOChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItMy5tYi1sZy0wCiAgICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkFwcmVuZGl6YWplIGJhc2FkbyBlbiBwcm95ZWN0b3M6PC9iPiBwZXJtaXRlIGEgbG9zIGVzdHVkaWFudGVzIGV4cGxvcmFyIHRlbWFzIGEgdHJhdsOpcyBkZSBsYSBpbnZlc3RpZ2FjacOzbiB5IGxhIGFwbGljYWNpw7NuIHByw6FjdGljYS4KICAgICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkVzdHVkaW9zIGRlIGNhc286PC9iPiBmYWNpbGl0YW4gbGEgY29uZXhpw7NuIGVudHJlIHRlb3LDrWEgeSBwcsOhY3RpY2EgbWVkaWFudGUgZWwgYW7DoWxpc2lzIGRlIHNpdHVhY2lvbmVzIHJlYWxlcy4KICAgICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkp1ZWdvcyBkZSByb2xlcyB5IHNpbXVsYWNpb25lczo8L2I+IG9mcmVjZW4gZXhwZXJpZW5jaWFzIGlubWVyc2l2YXMgcGFyYSBlbCBkZXNhcnJvbGxvIGRlIGhhYmlsaWRhZGVzIHkgY29ub2NpbWllbnRvcy4KICAgICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkRpYXJpb3MgZGUgYXByZW5kaXphamUgeSBwb3J0YWZvbGlvczo8L2I+IGZvbWVudGFuIGxhIHJlZmxleGnDs24geSBsYSBhdXRvZXZhbHVhY2nDs24gZGVsIHByb2Nlc28gZGUgYXByZW5kaXphamUuCiAgICAgICAgICAgICAgLmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICAgIGltZy5pbWctZmx1aWQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi81LnN2ZycsIHN0eWxlPSJtYXgtd2lkdGg6NDg2cHgiLCBhbHQ9IiIgKS5teC1hdXRvLm14LWxnLTAubXMtbGctYXV0by5tYi00Lm1iLWxnLTAKICAgIC5iZ19pbWctNQogICAgICBwLm1iLTQucHQtMyBFbCBkZXNhZsOtbyBwYXJhIGxvcyBlZHVjYWRvcmVzIHJhZGljYSBlbiBkaXNlw7FhciBleHBlcmllbmNpYXMgZGUgYXByZW5kaXphamUgcXVlIGludm9sdWNyZW4gYWN0aXZhbWVudGUgYSBsb3MgZXN0dWRpYW50ZXMgZW4gY2FkYSBldGFwYSBkZWwgY2ljbG8sIGRlc2RlIGxhIGV4cGVyaWVuY2lhIGNvbmNyZXRhIGluaWNpYWwgaGFzdGEgbGEgZXhwZXJpbWVudGFjacOzbiBhY3RpdmEgZmluYWwuIEFzaW1pc21vLCBlcyBmdW5kYW1lbnRhbCBxdWUgbG9zIGRvY2VudGVzIHNlYW4gY2FwYWNlcyBkZSBhZGFwdGFyIHN1cyBtw6l0b2RvcyBkZSBlbnNlw7FhbnphIGEgbG9zIGRpZmVyZW50ZXMgZXN0aWxvcyBkZSBhcHJlbmRpemFqZSBwcmVzZW50ZXMgZW4gZWwgYXVsYSwgcGVybWl0aWVuZG8gcXVlIGNhZGEgZXN0dWRpYW50ZSBhcHJlbmRhIGRlIG1hbmVyYSBzaWduaWZpY2F0aXZhIHkgYWNvcmRlIGEgc3VzIGZvcnRhbGV6YXMgeSBwcmVmZXJlbmNpYXMuCgogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAgIC5jb2wtbGctOAogICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnNoYWRvdy1zb2Z0LnAtNC5tYi00CiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWFyb3VuZC5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLW1kLWF1dG8KICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2xpbmsuc3ZnIiwgc3R5bGU9IndpZHRoOiA4MHB4OyIpLm14LWF1dG8ubWItNC5tYi1sZy0wCiAgICAgICAgICAgICAgLmNvbAogICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtYmV0d2Vlbi5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAgICAgLmNvbC5tYi0zLm1iLXNtLTAKICAgICAgICAgICAgICAgICAgICBoNS5tYi0xIEVsIGFwcmVuZGl6YWplIGV4cGVyaWVuY2lhbAogICAgICAgICAgICAgICAgICAgIHAubWItMCBQYXJhIHByb2Z1bmRpemFyIGVuIGxhIGFwbGljYWNpw7NuIGRlIGVzdGUgbW9kZWxvIHkgbGFzIGVzdHJhdGVnaWFzIHBlZGFnw7NnaWNhcyB1dGlsaXphZGFzLCBzZSByZWNvbWllbmRhIHJldmlzYXIgbGEgc2lndWllbnRlIGludmVzdGlnYWNpw7NuOgogICAgICAgICAgICAgICAgICAuY29sLXNtLWF1dG8KICAgICAgICAgICAgICAgICAgICBhLmJvdG9uLmNvbG9yLXByaW1hcmlvKGhyZWY9Imh0dHBzOi8vcmVwb3NpdG9yeS51cGIuZWR1LmNvL2JpdHN0cmVhbS9oYW5kbGUvMjAuNTAwLjExOTEyLzExNTk2L0VsJTIwYXByZW5kaXphamUlMjBleHBlcmllbmNpYWwlMjBjb21vJTIwZXN0cmF0ZWdpYSUyMHBhcmElMjBsYSUyMGVkdWNhY2klQzMlQjNuJTIwYW1iaWVudGFsJTIwaW5mYW50aWwucGRmP3NlcXVlbmNlPTEiIHRhcmdldD0iX2JsYW5rIikKICAgICAgICAgICAgICAgICAgICAgIHNwYW4gSXIgYWwgc2l0aW8KICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LXJpZ2h0CgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvZXJlYWRlci90ZWNub2xvZ2ljYWRlbG9yaWVudGUvMTI5NzI2P3BhZ2U9MjQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBTw6FleiBMw7NwZXosIEouIE0uICgyMDE4KS4gRXN0aWxvcyBkZSBhcHJlbmRpemFqZSB5IG3DqXRvZG9zIGRlIGVuc2XDsWFuemE6IChlZC4pLiBVTkVEIC0gVW5pdmVyc2lkYWQgTmFjaW9uYWwgZGUgRWR1Y2FjacOzbiBhIERpc3RhbmNpYS4gIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2l0c21pdHppcy53b3JkcHJlc3MuY29tLzIwMjAvMDcvMjkvZXN0aWxvcy1kZS1hcHJlbmRpemFqZS1tb2RlbG8tZGUtaG9uZXkteS1tdW1mb3JkLTE5ODYvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgSm9uaHNvbiwgTS4gKDI5IGRlIGp1bGlvLCAyMDIwKS4gRXN0aWxvcyBkZSBBcHJlbmRpemFqZSAoTW9kZWxvIGRlIEhvbmV5IHkgTXVtZm9yZCwgMTk4NikuIFdvcmRwcmVzcy5jb20uIAogICAgICAgICAgIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8veW91dHUuYmUvRHVFS1hIdUg1YXM/c2k9dUhzeXJYZjlBQ2ZDYUlUZCIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEVkIEtub3dzICYgU3VzcyBEcmF3cy4gKDIwMjEsIDE3IGRlIG5vdmllbWJyZSkuIEVzdGlsb3MgZGUgYXByZW5kaXphamUgwqFUZXN0IHBhcmEgc2FiZXIgZWwgdHV5byEgW1bDrWRlb10gWW91dHViZS4gCgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}